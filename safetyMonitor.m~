function [ flag ] = safetyMonitor( in1, in2 )

% in1, in2: Data Structure that stores information about the aircraft
%       (x, y): Current Location of the aircraft
%       (xd, yd): Destination of aircraft
%       theta: Current direction of motion
%       m: Message from neighbouring aircraft
%           - empty if aircraft not in neighbourhood
%           - (x, y, xd, yd, theta) of other aircraft if non-empty
%
% flag: true if the safety is violated and false otherwise.
global possible_to_collide;
flag_count = 0;
persistent last_visit1;
persistent last_visit2;

if isempty(last_visit2)
    last_visit2.x = in1.x;
    last_visit2.y = in1.y;
elseif isempty(last_visit1)
    last_visit1.x = in1.x;
    last_visit1.y = in1.y;    
end

flag = false;

if (in1.x == in2.x && in1.y == in2.y)
    flag = true;
    fprintf('Colliding\n');
    flag_count = flag_count +1;
elseif (((in1.x == in1.xd && in1.y == in1.yd) || (in2.x == in2.xd && in2.y == in2.yd)) && possible_to_collide == 1)
    flag = true;
    flag_count = flag_count +1;
    fprintf('possible_to_collide check failed');
elseif (in1.xd == in2.xd && in1.yd == in2.yd)
    flag = true;
    flag_count = flag_count +1;
    fprintf('they have the same destination, which is not allowed\n');
end

if in1.x == last_visit2.x && in1.y == last_visit2.y
    flag = true
    
end
end

